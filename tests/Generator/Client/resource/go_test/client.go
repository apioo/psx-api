
// Client automatically generated by SDKgen please do not edit this file manually
// @see https://sdkgen.app



import (
    "github.com/apioo/sdkgen-go"
)

type Client struct {
    internal *sdkgen.Client
}



// GetAll Returns a collection
func (client *Client) GetAll(startIndex int, count int, search string) (TestResponse, error) {
    pathParams := make(map[string]interface{})

    queryParams := make(map[string]interface{})
    queryParams["startIndex"] = startIndex
    queryParams["count"] = count
    queryParams["search"] = search

    u, err := url.Parse(client.internal.Parser.Url("/anything", pathParams))
    if err != nil {
        return TestResponse{}, errors.New("could not parse url")
    }

    u.RawQuery = client.internal.Parser.Query(queryParams).Encode()


    req, err := http.NewRequest("GET", u.String(), nil)
    if err != nil {
        return TestResponse{}, errors.New("could not create request")
    }


    resp, err := client.internal.HttpClient.Do(req)
    if err != nil {
        return TestResponse{}, errors.New("could not send request")
    }

    defer resp.Body.Close()

    if resp.StatusCode >= 200 && resp.StatusCode < 300 {
        respBody, err := io.ReadAll(resp.Body)
        if err != nil {
            return TestResponse{}, errors.New("could not read response body")
        }

        var response TestResponse
        err = json.Unmarshal(respBody, &response)
        if err != nil {
            return TestResponse{}, errors.New("could not unmarshal JSON response")
        }

        return response, nil
    }

    switch resp.StatusCode {
        default:
            return TestResponse{}, errors.New("the server returned an unknown status code")
    }
}

// Create Creates a new product
func (client *Client) Create(payload TestRequest) (TestResponse, error) {
    pathParams := make(map[string]interface{})

    queryParams := make(map[string]interface{})

    u, err := url.Parse(client.internal.Parser.Url("/anything", pathParams))
    if err != nil {
        return TestResponse{}, errors.New("could not parse url")
    }

    u.RawQuery = client.internal.Parser.Query(queryParams).Encode()

    raw, err := json.Marshal(payload)
    if err != nil {
        return TestResponse{}, errors.New("could not marshal provided JSON data")
    }

    var reqBody = bytes.NewReader(raw)

    req, err := http.NewRequest("POST", u.String(), reqBody)
    if err != nil {
        return TestResponse{}, errors.New("could not create request")
    }

    req.Header.Set("Content-Type", "application/json")

    resp, err := client.internal.HttpClient.Do(req)
    if err != nil {
        return TestResponse{}, errors.New("could not send request")
    }

    defer resp.Body.Close()

    if resp.StatusCode >= 200 && resp.StatusCode < 300 {
        respBody, err := io.ReadAll(resp.Body)
        if err != nil {
            return TestResponse{}, errors.New("could not read response body")
        }

        var response TestResponse
        err = json.Unmarshal(respBody, &response)
        if err != nil {
            return TestResponse{}, errors.New("could not unmarshal JSON response")
        }

        return response, nil
    }

    switch resp.StatusCode {
        default:
            return TestResponse{}, errors.New("the server returned an unknown status code")
    }
}

// Update Updates an existing product
func (client *Client) Update(id int, payload TestRequest) (TestResponse, error) {
    pathParams := make(map[string]interface{})
    pathParams["id"] = id

    queryParams := make(map[string]interface{})

    u, err := url.Parse(client.internal.Parser.Url("/anything/:id", pathParams))
    if err != nil {
        return TestResponse{}, errors.New("could not parse url")
    }

    u.RawQuery = client.internal.Parser.Query(queryParams).Encode()

    raw, err := json.Marshal(payload)
    if err != nil {
        return TestResponse{}, errors.New("could not marshal provided JSON data")
    }

    var reqBody = bytes.NewReader(raw)

    req, err := http.NewRequest("PUT", u.String(), reqBody)
    if err != nil {
        return TestResponse{}, errors.New("could not create request")
    }

    req.Header.Set("Content-Type", "application/json")

    resp, err := client.internal.HttpClient.Do(req)
    if err != nil {
        return TestResponse{}, errors.New("could not send request")
    }

    defer resp.Body.Close()

    if resp.StatusCode >= 200 && resp.StatusCode < 300 {
        respBody, err := io.ReadAll(resp.Body)
        if err != nil {
            return TestResponse{}, errors.New("could not read response body")
        }

        var response TestResponse
        err = json.Unmarshal(respBody, &response)
        if err != nil {
            return TestResponse{}, errors.New("could not unmarshal JSON response")
        }

        return response, nil
    }

    switch resp.StatusCode {
        default:
            return TestResponse{}, errors.New("the server returned an unknown status code")
    }
}

// Patch Patches an existing product
func (client *Client) Patch(id int, payload TestRequest) (TestResponse, error) {
    pathParams := make(map[string]interface{})
    pathParams["id"] = id

    queryParams := make(map[string]interface{})

    u, err := url.Parse(client.internal.Parser.Url("/anything/:id", pathParams))
    if err != nil {
        return TestResponse{}, errors.New("could not parse url")
    }

    u.RawQuery = client.internal.Parser.Query(queryParams).Encode()

    raw, err := json.Marshal(payload)
    if err != nil {
        return TestResponse{}, errors.New("could not marshal provided JSON data")
    }

    var reqBody = bytes.NewReader(raw)

    req, err := http.NewRequest("PATCH", u.String(), reqBody)
    if err != nil {
        return TestResponse{}, errors.New("could not create request")
    }

    req.Header.Set("Content-Type", "application/json")

    resp, err := client.internal.HttpClient.Do(req)
    if err != nil {
        return TestResponse{}, errors.New("could not send request")
    }

    defer resp.Body.Close()

    if resp.StatusCode >= 200 && resp.StatusCode < 300 {
        respBody, err := io.ReadAll(resp.Body)
        if err != nil {
            return TestResponse{}, errors.New("could not read response body")
        }

        var response TestResponse
        err = json.Unmarshal(respBody, &response)
        if err != nil {
            return TestResponse{}, errors.New("could not unmarshal JSON response")
        }

        return response, nil
    }

    switch resp.StatusCode {
        default:
            return TestResponse{}, errors.New("the server returned an unknown status code")
    }
}

// Delete Deletes an existing product
func (client *Client) Delete(id int) (TestResponse, error) {
    pathParams := make(map[string]interface{})
    pathParams["id"] = id

    queryParams := make(map[string]interface{})

    u, err := url.Parse(client.internal.Parser.Url("/anything/:id", pathParams))
    if err != nil {
        return TestResponse{}, errors.New("could not parse url")
    }

    u.RawQuery = client.internal.Parser.Query(queryParams).Encode()


    req, err := http.NewRequest("DELETE", u.String(), nil)
    if err != nil {
        return TestResponse{}, errors.New("could not create request")
    }


    resp, err := client.internal.HttpClient.Do(req)
    if err != nil {
        return TestResponse{}, errors.New("could not send request")
    }

    defer resp.Body.Close()

    if resp.StatusCode >= 200 && resp.StatusCode < 300 {
        respBody, err := io.ReadAll(resp.Body)
        if err != nil {
            return TestResponse{}, errors.New("could not read response body")
        }

        var response TestResponse
        err = json.Unmarshal(respBody, &response)
        if err != nil {
            return TestResponse{}, errors.New("could not unmarshal JSON response")
        }

        return response, nil
    }

    switch resp.StatusCode {
        default:
            return TestResponse{}, errors.New("the server returned an unknown status code")
    }
}




func Build(token string) (*Client, error) {
    var credentials = sdkgen.HttpBearer{Token: token}

    client, err := sdkgen.NewClient("http://127.0.0.1:8081", credentials)
    if err != nil {
        return &Client{}, err
    }

    return &Client {
        internal: client,
    }, nil
}
