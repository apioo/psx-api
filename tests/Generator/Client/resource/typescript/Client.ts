/**
 * Client automatically generated by SDKgen please do not edit this file manually
 * {@link https://sdkgen.app}
 */

import axios, {AxiosRequestConfig} from "axios";
import {ClientAbstract, CredentialsInterface, TokenStoreInterface} from "sdkgen-client"
import {HttpBearer} from "sdkgen-client"
import {ClientException, UnknownStatusCodeException} from "sdkgen-client";

import {ArrayEntryMessageException} from "./ArrayEntryMessageException";
import {Entry} from "./Entry";
import {EntryCollection} from "./EntryCollection";
import {EntryCreate} from "./EntryCreate";
import {EntryDelete} from "./EntryDelete";
import {EntryMessage} from "./EntryMessage";
import {EntryMessageException} from "./EntryMessageException";
import {EntryPatch} from "./EntryPatch";
import {EntryUpdate} from "./EntryUpdate";
import {MapEntryMessageException} from "./MapEntryMessageException";

export class Client extends ClientAbstract {
    /**
     * Returns a collection
     *
     * @returns {Promise<EntryCollection>}
     * @throws {ClientException}
     */
    public async get(name: string, type: string, startIndex?: number, float?: number, boolean?: boolean, date?: string, datetime?: string, args?: Entry): Promise<EntryCollection> {
        const url = this.parser.url('/foo/:name/:type', {
            'name': name,
            'type': type,
        });

        let params: AxiosRequestConfig = {
            url: url,
            method: 'GET',
            headers: {
            },
            params: this.parser.query({
                'startIndex': startIndex,
                'float': float,
                'boolean': boolean,
                'date': date,
                'datetime': datetime,
                'args': args,
            }, [
                'args',
            ]),
        };

        try {
            const response = await this.httpClient.request<EntryCollection>(params);
            return response.data;
        } catch (error) {
            if (error instanceof ClientException) {
                throw error;
            } else if (axios.isAxiosError(error) && error.response) {
                const statusCode = error.response.status;

                throw new UnknownStatusCodeException('The server returned an unknown status code');
            } else {
                throw new ClientException('An unknown error occurred: ' + String(error));
            }
        }
    }

    /**
     * @returns {Promise<EntryMessage>}
     * @throws {EntryMessageException}
     * @throws {ClientException}
     */
    public async create(name: string, type: string, payload: EntryCreate): Promise<EntryMessage> {
        const url = this.parser.url('/foo/:name/:type', {
            'name': name,
            'type': type,
        });

        let params: AxiosRequestConfig = {
            url: url,
            method: 'POST',
            headers: {
            },
            params: this.parser.query({
            }, [
            ]),
            data: payload
        };

        try {
            const response = await this.httpClient.request<EntryMessage>(params);
            return response.data;
        } catch (error) {
            if (error instanceof ClientException) {
                throw error;
            } else if (axios.isAxiosError(error) && error.response) {
                const statusCode = error.response.status;

                if (statusCode === 400) {
                    throw new EntryMessageException(error.response.data);
                }

                if (statusCode === 500) {
                    throw new EntryMessageException(error.response.data);
                }

                throw new UnknownStatusCodeException('The server returned an unknown status code');
            } else {
                throw new ClientException('An unknown error occurred: ' + String(error));
            }
        }
    }

    /**
     * @returns {Promise<Record<string, EntryMessage>>}
     * @throws {EntryMessageException}
     * @throws {MapEntryMessageException}
     * @throws {ClientException}
     */
    public async update(name: string, type: string, payload: Record<string, EntryUpdate>): Promise<Record<string, EntryMessage>> {
        const url = this.parser.url('/foo/:name/:type', {
            'name': name,
            'type': type,
        });

        let params: AxiosRequestConfig = {
            url: url,
            method: 'PUT',
            headers: {
            },
            params: this.parser.query({
            }, [
            ]),
            data: payload
        };

        try {
            const response = await this.httpClient.request<Record<string, EntryMessage>>(params);
            return response.data;
        } catch (error) {
            if (error instanceof ClientException) {
                throw error;
            } else if (axios.isAxiosError(error) && error.response) {
                const statusCode = error.response.status;

                if (statusCode === 400) {
                    throw new EntryMessageException(error.response.data);
                }

                if (statusCode === 500) {
                    throw new MapEntryMessageException(error.response.data);
                }

                throw new UnknownStatusCodeException('The server returned an unknown status code');
            } else {
                throw new ClientException('An unknown error occurred: ' + String(error));
            }
        }
    }

    /**
     * @returns {Promise<void>}
     * @throws {ClientException}
     */
    public async delete(name: string, type: string): Promise<void> {
        const url = this.parser.url('/foo/:name/:type', {
            'name': name,
            'type': type,
        });

        let params: AxiosRequestConfig = {
            url: url,
            method: 'DELETE',
            headers: {
            },
            params: this.parser.query({
            }, [
            ]),
        };

        try {
            const response = await this.httpClient.request(params);
        } catch (error) {
            if (error instanceof ClientException) {
                throw error;
            } else if (axios.isAxiosError(error) && error.response) {
                const statusCode = error.response.status;

                throw new UnknownStatusCodeException('The server returned an unknown status code');
            } else {
                throw new ClientException('An unknown error occurred: ' + String(error));
            }
        }
    }

    /**
     * @returns {Promise<Array<EntryMessage>>}
     * @throws {EntryMessageException}
     * @throws {ArrayEntryMessageException}
     * @throws {ClientException}
     */
    public async patch(name: string, type: string, payload: Array<EntryPatch>): Promise<Array<EntryMessage>> {
        const url = this.parser.url('/foo/:name/:type', {
            'name': name,
            'type': type,
        });

        let params: AxiosRequestConfig = {
            url: url,
            method: 'PATCH',
            headers: {
            },
            params: this.parser.query({
            }, [
            ]),
            data: payload
        };

        try {
            const response = await this.httpClient.request<Array<EntryMessage>>(params);
            return response.data;
        } catch (error) {
            if (error instanceof ClientException) {
                throw error;
            } else if (axios.isAxiosError(error) && error.response) {
                const statusCode = error.response.status;

                if (statusCode === 400) {
                    throw new EntryMessageException(error.response.data);
                }

                if (statusCode === 500) {
                    throw new ArrayEntryMessageException(error.response.data);
                }

                throw new UnknownStatusCodeException('The server returned an unknown status code');
            } else {
                throw new ClientException('An unknown error occurred: ' + String(error));
            }
        }
    }



    public static build(token: string): Client
    {
        return new Client('http://api.foo.com', new HttpBearer(token));
    }

    public static buildAnonymous(): Client
    {
        return new Client('http://api.foo.com', new Anonymous());
    }
}
