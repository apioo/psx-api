/**
 * FooBarTag automatically generated by SDKgen please do not edit this file manually
 * {@link https://sdkgen.app}
 */

import {TagAbstract, HttpRequest} from "sdkgen-client"
import {ClientException, UnknownStatusCodeException} from "sdkgen-client";

import {EntryCollection} from "./EntryCollection";
import {EntryCreate} from "./EntryCreate";
import {EntryMessage} from "./EntryMessage";
import {EntryMessageException} from "./EntryMessageException";

export class FooBarTag extends TagAbstract {
    /**
     * Returns a collection
     *
     * @returns {Promise<EntryCollection>}
     * @throws {ClientException}
     */
    public async get(): Promise<EntryCollection> {
        const url = this.parser.url('/foo', {
        });

        let request: HttpRequest = {
            url: url,
            method: 'GET',
            headers: {
            },
            params: this.parser.query({
            }, [
            ]),
        };

        const response = await this.httpClient.request(request);
        if (response.ok) {
            return await response.json() as EntryCollection;
        }

        const statusCode = response.status;
        throw new UnknownStatusCodeException('The server returned an unknown status code: ' + statusCode);
    }
    /**
     * @returns {Promise<EntryMessage>}
     * @throws {EntryMessageException}
     * @throws {ClientException}
     */
    public async create(payload: EntryCreate): Promise<EntryMessage> {
        const url = this.parser.url('/foo', {
        });

        let request: HttpRequest = {
            url: url,
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            params: this.parser.query({
            }, [
            ]),
            data: payload
        };

        const response = await this.httpClient.request(request);
        if (response.ok) {
            return await response.json() as EntryMessage;
        }

        const statusCode = response.status;
        if (statusCode === 400) {
            throw new EntryMessageException(await response.json() as EntryMessage);
        }

        if (statusCode === 500) {
            throw new EntryMessageException(await response.json() as EntryMessage);
        }

        throw new UnknownStatusCodeException('The server returned an unknown status code: ' + statusCode);
    }



}
