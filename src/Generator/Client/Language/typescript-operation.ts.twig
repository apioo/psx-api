{% for operation in operations %}
    /**
{% if operation.description %}     * {{ operation.description|raw }}
     *
{% endif %}
{% for name, arg in operation.args %}     * @param {{ '{' }}{{ arg.schema.docType|raw }}{{ '}' }} {{ name }}
{% endfor %}
     * @returns {{ '{' }}Promise<{% if operation.return %}{{ operation.return.schema.docType|raw }}{% else %}void{% endif %}>{{ '}' }}
{% for throw in operation.throws|throws_unique %}     * @throws {{ '{' }}{{ throw.className|raw }}{{ '}' }}
{% endfor %}
     * @throws {{ '{' }}ClientException{{ '}' }}
     */
    public async {{ operation.methodName }}({% for name, arg in operation.arguments %}{{ name }}{% if arg.schema.optional %}?{% endif %}: {{ arg.schema.type|raw }}{% if not loop.last %}, {% endif %}{% endfor %}): Promise<{% if operation.return %}{{ operation.return.schema.type|raw }}{% else %}void{% endif %}> {
        const url = this.parser.url('{{ operation.path|raw }}', {
{% for name, realName in operation.pathNames %}
            '{{ realName }}': {{ name }},
{% endfor %}
        });

        let request: HttpRequest = {
            url: url,
            method: '{{ operation.method }}',
            headers: {
{% if operation.bodyContentShape == 'multipart/form-data' %}
{% elseif operation.bodyContentType %}
                'Content-Type': '{{ operation.bodyContentType }}',
{% elseif operation.bodyName %}
                'Content-Type': 'application/json',
{% endif %}
            },
            params: this.parser.query({
{% for name, realName in operation.queryNames %}
                '{{ realName }}': {{ name }},
{% endfor %}
            }, [
{% for realName in operation.queryStructNames %}
                '{{ realName }}',
{% endfor %}
            ]),
{% if operation.bodyName %}
            data: {{ operation.bodyName }}
{% endif %}
        };

        const response = await this.httpClient.request(request);
        if (response.ok) {
{% if operation.return %}
            return {{ _self.response(operation.return, false) }};
{% endif %}
        }

        const statusCode = response.status;
{% for code, throw in operation.throws %}
        if ({% if code == 999 %}statusCode >= 0 && statusCode <= 999{% elseif code == 499 %}statusCode >= 400 && statusCode <= 499{% elseif code == 599 %}statusCode >= 500 && statusCode <= 599{% else %}statusCode === {{ code }}{% endif %}) {
            throw new {{ throw.className|raw }}({{ _self.response(throw, true) }});
        }

{% endfor %}
        throw new UnknownStatusCodeException('The server returned an unknown status code: ' + statusCode);
    }
{% endfor %}


{% macro response(payload) %}
{% if payload.contentShape == 'application/octet-stream' %}
await response.arrayBuffer(){% elseif payload.contentShape == 'application/x-www-form-urlencoded' %}
new URLSearchParams(await response.formData() as any){% elseif payload.contentShape == 'application/json' %}
await response.json(){% elseif payload.contentShape == 'multipart/form-data' %}
await response.formData(){% elseif payload.contentShape == 'text/plain' or payload.contentShape == 'application/xml' %}
await response.text(){% else %}
await response.json() as {{ payload.schema.type|raw }}{% endif %}
{% endmacro %}
