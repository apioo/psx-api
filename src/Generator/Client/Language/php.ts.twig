{% if namespace %}
namespace {{ namespace }};
{% endif %}

use GuzzleHttp\Client;
use PSX\Api\Generator\Client\Php\ResourceAbstract;
use PSX\Schema\SchemaManager;

class {{ className }} extends ResourceAbstract
{
    /**
     * @var string
     */
    private $url;

{% for name, hint in properties %}
    /**
     * @var {{ hint }}
     */
    private ${{ name }};

{% endfor %}
    public function __construct({% for name, hint in properties %}{{ hint }} ${{ name }}, {% endfor %}string $baseUrl, string $token, ?Client $httpClient = null, ?SchemaManager $schemaManager = null)
    {
        parent::__construct($baseUrl, $token, $httpClient, $schemaManager);

{% for name, hint in properties %}
        $this->{{ name }} = ${{ name }};
{% endfor %}
        $this->url = $this->baseUrl . '{% for part in urlParts %}/{% if part.type == 'variable' %}' . ${{ part.value }} . '{% else %}{{ part.value }}{% endif %}{{ url|raw }}{% endfor %}';
    }

{% for methodName, method in methods %}
    /**
{% if method.description %}     * {{ method.description }}
     *
{% endif %}
{% for name, hint in method.docs %}     * @param {{ hint }} ${{ name }}
{% endfor %}
     * @return {% if method.returnDoc %}{{ method.returnDoc }}{% else %}void{% endif %}

     */
    public function {{ methodName }}({% for name, hint in method.args %}{% if hint %}?{{ hint }} {% endif %}${{ name }}{% if not loop.last %}, {% endif %}{% endfor %}){% if method.return %}: {{ method.return }}{% endif %}

    {
        $options = [
{% if method.args.query is defined %}
            'query' => $query !== null ? (array) $query->jsonSerialize() : [],
{% endif %}
{% if method.secure %}
            'headers' => [
                'Authorization' => 'Bearer ' . $this->token
            ],
{% endif %}
{% if method.args.data is defined %}
            'json' => $data
{% endif %}
        ];

        $response = $this->httpClient->request('{{ method.httpMethod }}', $this->url, $options);
        $data     = (string) $response->getBody();

        return $this->parse($data, {% if method.return %}{{ method.return }}::class{% else %}null{% endif %});
    }

{% endfor %}
}
