import {AxiosInstance, AxiosRequestConfig, AxiosResponse} from "axios";
import {ResourceAbstract} from "sdkgen-client"
{% for className in imports %}
import {{ '{' }}{{ className }}{{ '}' }} from "./{{ className }}";
{% endfor %}

export default class {{ className }} extends ResourceAbstract {
    private url: string;

{% for name, hint in properties %}
    private {{ name }}: {{ hint }};
{% endfor %}

    public constructor({% for name, hint in properties %}{{ name }}: {{ hint|raw }}, {% endfor %}baseUrl: string, httpClient: AxiosInstance) {
        super(baseUrl, httpClient);

{% for name, hint in properties %}
        this.{{ name }} = {{ name }};
{% endfor %}

        this.url = baseUrl + "{% for part in urlParts %}/{% if part.type == 'variable' %}"+{{ part.value }}+"{% else %}{{ part.value }}{% endif %}{{ url|raw }}{% endfor %}";
    }

{% for methodName, method in methods %}
    /**
{% if method.description %}     * {{ method.description }}
     *
{% endif %}
{% for name, hint in method.docs %}     * @param {{ '{' }}{{ hint }}{{ '}' }} {{ name }}
{% endfor %}
     * @returns {{ '{' }}AxiosResponse<{% if method.returnDoc %}{{ method.returnDoc|raw }}{% else %}void{% endif %}>{{ '}' }}
     */
    public async {{ methodName }}({% for name, hint in method.args %}{{ name }}?: {{ hint|raw }}{% if not loop.last %}, {% endif %}{% endfor %}){% if method.return %}: AxiosResponse<{% if method.return %}{{ method.return|raw }}{% else %}any{% endif %}>{% endif %} {
        let params: AxiosRequestConfig = {
            method: '{{ method.httpMethod }}',
{% if method.args.query is defined %}
            params: query,
{% endif %}
            responseType: 'json',
            headers: {
                Accept: 'application/json',
            },
        };

{% if method.httpMethod in ["DELETE"] %}
        return this.httpClient.{{ method.httpMethod|lower }}(this.url, params);
{% elseif method.httpMethod in ["POST", "PUT", "PATCH"] %}
        return this.httpClient.{{ method.httpMethod|lower }}{% if method.return %}<{{ method.return }}>{% endif %}(this.url, {% if method.args.data is defined %}data{% else %}null{% endif %}, params);
{% else %}
        return this.httpClient.{{ method.httpMethod|lower }}{% if method.return %}<{{ method.return }}>{% endif %}(this.url, params);
{% endif %}
    }

{% endfor %}
}
