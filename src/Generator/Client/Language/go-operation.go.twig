
{% for operation in operations %}
// {{ operation.methodName }} {{ operation.description }}
func (client *{{ className }}) {{ operation.methodName }}({% for name, arg in operation.arguments %}{{ name }} {{ arg.schema.type }}{% if not loop.last %}, {% endif %}{% endfor %}) ({% if operation.return %}{{ method.return.schema.type }}, {% endif %}error) {
    pathParams := make(map[string]interface{})
{% for name, realName in operation.pathNames %}
    pathParams["{{ realName }}"] = {{ name }};
{% endfor %}

    queryParams := url.Values{}
{% for name, realName in operation.queryNames %}
    queryParams.Add("{{ realName }}", {{ name }});
{% endfor %}

    url, err := url.Parse(client.Parser.Url('{{ operation.path }}', pathParams))
    if err != nil {
        return {% if operation.return %}{{ operation.return.schema.type }}{}, {% endif %}errors.New("could not parse url")
    }

    url.RawQuery = values.Encode()

{% if operation.bodyName %}
    raw, err := json.Marshal({{ operation.bodyName }})
    if err != nil {
        return {% if operation.return %}{{ operation.return.schema.type }}{}, {% endif %}errors.New("could not marshal provided JSON data")
    }

    var reqBody = bytes.NewReader(raw)
{% endif %}

    req, err := http.NewRequest("{{ method.httpMethod }}", url.String(), {% if operation.bodyName %}reqBody{% else %}nil{% endif %})
    if err != nil {
        return {% if operation.return %}{{ operation.return.schema.type }}{}, {% endif %}errors.New("could not create request")
    }

{% if operation.bodyName %}
    req.Header.Set("Content-Type", "application/json")
{% endif %}

    resp, err := resource.client.Do(req)
    if err != nil {
        return {% if operation.return %}{{ operation.return.schema.type }}{}, {% endif %}errors.New("could not send request")
    }

    defer resp.Body.Close()

    if (resp.StatusCode >= 200 && resp.StatusCode < 300) {
{% if operation.return %}
        respBody, err := io.ReadAll(resp.Body)
        if err != nil {
            return {% if operation.return %}{{ operation.return.schema.type }}{}, {% endif %}errors.New("could not read response body")
        }

        var response {{ operation.return.schema.type }}
        err = json.Unmarshal(respBody, &response)
        if err != nil {
            return {% if operation.return.schema.type %}{{ operation.return.schema.type }}{}, {% endif %}errors.New("could not unmarshal JSON response")
        }

        return response, nil
{% else %}
        return nil
{% endif %}
    }

    switch resp.StatusCode {
{% for code, return in operation.throws %}
        case {{ code }}:
            var response {{ operation.return.schema.type }}
            err = json.Unmarshal(respBody, &response)
            if err != nil {
                return {% if operation.return.schema.type %}{{ operation.return.schema.type }}{}, {% endif %}errors.New("could not unmarshal JSON response")
            }

            return {% if operation.return %}{{ operation.return.schema.type }}{}, {% endif %}, &{{ return.schema.type }}Exception{
                Response: response,
                Err:      errors.New("unavailable"),
            }
{% endfor %}
        default:
            return {% if operation.return %}{{ operation.return.schema.type }}{}, {% endif %}, errors.New("the server returned an unknown status code")
    }
}

{% endfor %}
