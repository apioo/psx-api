{% if namespace %}
package {{ namespace|lower }}
{% endif %}

import (
    "github.com/apioo/sdkgen-go"
)

type {{ className }} struct {
    internal *sdkgen.Client
}

{% for class, resource in resources %}
// {{ resource.methodName }} {{ resource.description|raw }}
func (client {{ className }}) {{ resource.methodName }}({% for name, arg in resource.properties %}{{ name }} {{ arg.type }}{% if not loop.last %}, {% endif %}{% endfor %}) *{{ class }} {
    return New{{ class }}({% for name, arg in resource.properties %}{{ name }}, {% endfor %}client.internal.GetResource())
}

{% endfor %}

func New{{ className }}(baseUrl string, {% if security.type == 'httpBasic' %}userName string, password string{% elseif security.type in ['httpBearer', 'apiKey'] %}token string{% elseif security.type in ['clientCredentials', 'authorizationCode'] %}clientId string, clientSecret string{% else %}credentials sdkgen.CredentialsInterface{% endif %}, tokenStore sdkgen.TokenStoreInterface, scopes []string) *{{ className }} {
{% if security.type == 'httpBasic' %}
    var credentials := sdkgen.HttpBasic{UserName: userName, Password: password}
{% elseif security.type == 'httpBearer' %}
    var credentials := sdkgen.HttpBearer{Token: token}
{% elseif security.type == 'apiKey' %}
    var credentials := sdkgen.ApiKey{Token: token, Name: "{{ security.name }}", In: "{{ security.in }}"}
{% elseif security.type == 'clientCredentials' %}
    var credentials := sdkgen.ClientCredentials{
        ClientId: clientId,
        ClientSecret, clientSecret,
        TokenUrl: "{{ security.tokenUrl }}",
        RefreshUrl: "{{ security.refreshUrl }}"
    }
{% elseif security.type == 'authorizationCode' %}
    var credentials := sdkgen.AuthorizationCode{
        ClientId: clientId,
        ClientSecret, clientSecret,
        TokenUrl: "{{ security.tokenUrl }}",
        AuthorizationUrl: "{{ security.authorizationUrl }}",
        RefreshUrl: "{{ security.refreshUrl }}"
    }
{% endif %}

    return &{{ className }} {
        internal: sdkgen.NewClient(baseUrl, credentials, tokenStore, scopes),
    }
}
