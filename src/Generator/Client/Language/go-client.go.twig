{% if namespace %}
package {{ namespace|lower }}
{% endif %}

import (
    "github.com/apioo/sdkgen-go"
)

type {{ className }} struct {
    internal *sdkgen.Client
}

{% for tag in tags %}
func (client *{{ className }}) {{ tag.methodName }}() *{{ tag.className }} {
    return New{{ class }}(client.internal.HttpClient, client.internal.Parser)
}

{% endfor %}

{{ operations|raw }}


{% if security.type == 'httpBasic' %}
func Build({% if not baseUrl %}baseUrl string, {% endif %}userName string, password string) *{{ className }} {
    var credentials := sdkgen.HttpBasic{UserName: userName, Password: password}
{% elseif security.type == 'httpBearer' %}
func Build({% if not baseUrl %}baseUrl string, {% endif %}token string) *{{ className }} {
    var credentials := sdkgen.HttpBearer{Token: token}
{% elseif security.type == 'apiKey' %}
func Build({% if not baseUrl %}baseUrl string, {% endif %}token string) *{{ className }} {
    var credentials := sdkgen.ApiKey{Token: token, Name: "{{ security.name }}", In: "{{ security.in }}"}
{% elseif security.type == 'oauth2' %}
func Build({% if not baseUrl %}baseUrl string, {% endif %}clientId string, clientSecret string, tokenStore sdkgen.TokenStoreInterface, scopes []string) *{{ className }} {
    var credentials := sdkgen.ClientCredentials{
        ClientId: clientId,
        ClientSecret, clientSecret,
        TokenUrl: "{{ security.tokenUrl }}",
        AuthorizationUrl: "{{ security.authorizationUrl }}",
        TokenStore: tokenStore,
        Scopes: scopes,
    }
{% endif %}

    return &{{ className }} {
        internal: sdkgen.NewClient(baseUrl, credentials, tokenStore, scopes),
    }
}
