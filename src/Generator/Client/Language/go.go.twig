{% if namespace %}
package {{ namespace|lower }}
{% endif %}

import (
    "encoding/json"
    "io/ioutil"
    "net/http"
    "time"
)

type {{ className }} struct {
    BaseUrl string
    Token string
{% for name, hint in properties %}
    {{ name|capitalize }} {{ hint }}
{% endfor %}
}

{% for methodName, method in methods %}
// {{ methodName|capitalize }} {{ method.description }}
func (r {{ className }}) {{ methodName|capitalize }}({% for name, hint in method.args %}{{ name }} {{ hint }}{% if not loop.last %}, {% endif %}{% endfor %}) {{ method.return }} {

{% if method.httpMethod != "GET" and method.httpMethod != "DELETE" %}
    raw, err := json.Marshal(data)
    if err != nil {
        panic(err)
    }
    var reqBody = bytes.NewReader(raw)
{% endif %}

    req, err := http.NewRequest("{{ method.httpMethod }}", r.BaseURL + url, {% if method.httpMethod != "GET" and method.httpMethod != "DELETE" %}reqBody{% else %}nil{% endif %})
{% if method.httpMethod != "GET" and method.httpMethod != "DELETE" %}
    req.Header.Set("Content-Type", "application/json")
{% endif %}
{% if method.secure %}
    req.Header.Set("Authorization", "Bearer " + r.Token)
{% endif %}

    client := &http.Client{}
    resp, err := client.Do(req)

    if err != nil {
        panic(err)
    }

    defer resp.Body.Close()
    respBody, _ := ioutil.ReadAll(resp.Body)

    var response {{ method.return }}
    json.Unmarshal(respBody, &response)

    return response
}

{% endfor %}

func New{{ className }}({% for name, hint in properties %}{{ name }} {{ hint }}, {% endfor %}baseUrl string, token string) {{ className }} {
    r := {{ className }} {
        BaseUrl: baseUrl + "{% for part in urlParts %}/{% if part.type == 'variable' %}"+{{ part.value }}+"{% else %}{{ part.value }}{% endif %}{{ url|raw }}{% endfor %}",
        Token: token
    }
    return r
}
