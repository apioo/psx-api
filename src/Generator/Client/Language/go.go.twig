{% if namespace %}
package {{ namespace|lower }}
{% endif %}

import (
    "bytes"
    "encoding/json"
    "errors"
    "io/ioutil"
    "net/http"
    "github.com/apioo/sdkgen-go"
)

type {{ className }} struct {
    url string
    client *http.Client
}

{% for methodName, method in methods %}
// {{ methodName }} {{ method.description }}
func (resource {{ className }}) {{ methodName }}({% for name, arg in method.args %}{{ name }} {{ arg.type }}{% if not loop.last %}, {% endif %}{% endfor %}) ({% if method.return.type %}{{ method.return.type }}, {% endif %}error) {
    url, err := url.Parse(resource.url)
    if err != nil {
        return {% if method.return.type %}{{ method.return.type }}{}, {% endif %}errors.New("could not parse url")
    }

{% if method.args.query %}
    rawJson, err := json.Marshal(query)
    if err != nil {
        return {% if method.return.type %}{{ method.return.type }}{}, {% endif %}errors.New("could not marshall query")
    }

    parameters := url.Query()
    err = json.Unmarshal(rawJson, &parameters)
    url.RawQuery = parameters.Encode()
{% endif %}

{% if method.args.data %}
    raw, err := json.Marshal(data)
    if err != nil {
        return {% if method.return.type %}{{ method.return.type }}{}, {% endif %}errors.New("could not marshal provided JSON data")
    }

    var reqBody = bytes.NewReader(raw)
{% endif %}

    req, err := http.NewRequest("{{ method.httpMethod }}", url.String(), {% if method.args.data %}reqBody{% else %}nil{% endif %})
    if err != nil {
        return {% if method.return.type %}{{ method.return.type }}{}, {% endif %}errors.New("could not create request")
    }

{% if method.httpMethod != "GET" and method.httpMethod != "DELETE" %}
    req.Header.Set("Content-Type", "application/json")
{% endif %}

    resp, err := resource.client.Do(req)
    if err != nil {
        return {% if method.return.type %}{{ method.return.type }}{}, {% endif %}errors.New("could not send request")
    }

    defer resp.Body.Close()

{% if method.return.type %}
    respBody, err := ioutil.ReadAll(resp.Body)
    if err != nil {
        return {% if method.return.type %}{{ method.return.type }}{}, {% endif %}errors.New("could not read response body")
    }

    var response {{ method.return.type }}

    err = json.Unmarshal(respBody, &response)
    if err != nil {
        return {% if method.return.type %}{{ method.return.type }}{}, {% endif %}errors.New("could not unmarshal JSON response")
    }

    return response, nil
{% else %}
    return nil
{% endif %}
}

{% endfor %}

func New{{ className }}({% for name, arg in properties %}{{ name }} {{ arg.type }}, {% endfor %}resource *sdkgen.Resource) *{{ className }} {
    return &{{ className }} {
        url: resource.BaseUrl + "{% for part in urlParts %}/{% if part.type == 'variable' %}"+{{ part.value }}+"{% else %}{{ part.value }}{% endif %}{{ url|raw }}{% endfor %}",
        client: resource.HttpClient,
    }
}
