{% if namespace %}
package {{ namespace|lower }}
{% endif %}

import (
    "bytes"
    "encoding/json"
    "errors"
    "io/ioutil"
    "net/http"
    "time"
    "github.com/apioo/sdkgen-go"
)

type {{ className }} struct {
    url string
    client *http.Client
}

{% for methodName, method in methods %}
// {{ methodName }} {{ method.description }}
func (resource {{ className }}) {{ methodName }}({% for name, arg in method.args %}{{ name }} {{ arg.type }}{% if not loop.last %}, {% endif %}{% endfor %}) ({{ method.return.type }}, error) {

{% if method.httpMethod != "GET" and method.httpMethod != "DELETE" %}
    raw, err := json.Marshal(data)
    if err != nil {
        return {{ method.return.type }}{}, errors.New("could not marshal provided JSON data")
    }

    var reqBody = bytes.NewReader(raw)
{% endif %}

    req, err := http.NewRequest("{{ method.httpMethod }}", resource.url, {% if method.httpMethod != "GET" and method.httpMethod != "DELETE" %}reqBody{% else %}nil{% endif %})
{% if method.httpMethod != "GET" and method.httpMethod != "DELETE" %}
    req.Header.Set("Content-Type", "application/json")
{% endif %}

    resp, err := resource.client.Do(req)
    if err != nil {
        return {{ method.return.type }}{}, errors.New("could not send request")
    }

    defer resp.Body.Close()
    respBody, err := ioutil.ReadAll(resp.Body)
    if err != nil {
        return {{ method.return.type }}{}, errors.New("could not read response body")
    }

    var response {{ method.return.type }}
    err = json.Unmarshal(respBody, &response)
    if err != nil {
        return {{ method.return.type }}{}, errors.New("could not unmarshal JSON response")
    }

    return response, nil
}

{% endfor %}

func New{{ className }}({% for name, arg in properties %}{{ name }} {{ arg.type }}, {% endfor %}resource *sdkgen.Resource) {{ className }} {
    return {{ className }} {
        url: resource.BaseUrl + "{% for part in urlParts %}/{% if part.type == 'variable' %}"+{{ part.value }}+"{% else %}{{ part.value }}{% endif %}{{ url|raw }}{% endfor %}",
        client: resource.HttpClient,
    }
}
