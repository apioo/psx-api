import {ClientAbstract, CredentialsInterface, TokenStoreInterface} from "sdkgen-client"
{% if security.type == 'httpBasic' %}
import {HttpBasic} from "sdkgen-client"
{% elseif security.type == 'httpBearer' %}
import {HttpBearer} from "sdkgen-client"
{% elseif security.type == 'apiKey' %}
import {ApiKey} from "sdkgen-client"
{% elseif security.type == 'clientCredentials' %}
import {ClientCredentials} from "sdkgen-client"
{% elseif security.type == 'authorizationCode' %}
import {AuthorizationCode} from "sdkgen-client"
{% endif %}

{% for className, resource in resources %}
import {{ className }} from "./{{ className }}";
{% endfor %}

export default class {{ className }} extends ClientAbstract {
    public constructor(baseUrl: string, {% if security.type == 'httpBasic' %}userName: string, password: string, {% elseif security.type in ['httpBearer', 'apiKey'] %}token: string, {% elseif security.type in ['clientCredentials', 'authorizationCode'] %}clientId: string, clientSecret: string, {% else %}credentials: CredentialsInterface|null = null, {% endif %}tokenStore: TokenStoreInterface|null = null, scopes: Array<string>|null = []) {
        super(baseUrl, {% if security.type == 'httpBasic' %}new HttpBasic(userName, password){% elseif security.type == 'httpBearer' %}new HttpBearer(token){% elseif security.type == 'apiKey' %}new ApiKey(token, '{{ security.name }}', '{{ security.in }}'){% elseif security.type == 'clientCredentials' %}new ClientCredentials(clientId, clientSecret, '{{ security.tokenUrl }}', '{{ security.authorizationUrl }}', '{{ security.refreshUrl }}'){% elseif security.type == 'authorizationCode' %}new AuthorizationCode(clientId, clientSecret, '{{ security.tokenUrl }}', '{{ security.authorizationUrl }}', '{{ security.refreshUrl }}'){% else %}credentials{% endif %}, tokenStore, scopes);
    }

{% for tag in tags %}
    public function {{ tag.methodName }}(): {{ tag.className }}
    {
        return new {{ tag.className }}(
            this.httpClient,
            this.parser
        );
    }

{% endfor %}

{{ operations|raw }}

}
