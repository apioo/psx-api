import Axios, {AxiosInstance, AxiosPromise} from "axios";
{% for className, resource in resources %}
import {{ className }} from "./{{ className }}";
{% endfor %}

export default class Client {
    private baseUrl: string;
    private token: string;
    private httpClient: AxiosInstance;

    public constructor(baseUrl: string, token: string, httpClient?: AxiosInstance) {
        this.baseUrl = baseUrl;
        this.token = token;
        this.httpClient = httpClient ? httpClient : Axios.create();
    }

{% for className, resource in resources %}
    /**
     * {{ resource.description|raw }}
     * 
     * @returns {{ className }}
     */
    public {{ resource.methodName }}({% for name, hint in resource.properties %}{{ name }}: {{ hint|raw }}{% if not loop.last %}, {% endif %}{% endfor %}): {{ className }}
    {
        return new {{ className }}(
            {% for name, hint in resource.properties %}{{ name }},
            {% endfor %}
this.baseUrl,
            this.token,
            this.httpClient
        );
    }

{% endfor %}
}
