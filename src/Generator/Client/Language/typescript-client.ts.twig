import axios, {AxiosRequestConfig} from "axios";
import {ClientAbstract, CredentialsInterface, TokenStoreInterface} from "sdkgen-client"
{% if security.type == 'httpBasic' %}
import {HttpBasic} from "sdkgen-client"
{% elseif security.type == 'httpBearer' %}
import {HttpBearer} from "sdkgen-client"
{% elseif security.type == 'apiKey' %}
import {ApiKey} from "sdkgen-client"
{% elseif security.type == 'oauth2' %}
import {OAuth2} from "sdkgen-client"
{% else %}
import {Anonymous} from "sdkgen-client"
{% endif %}
import {ClientException, UnknownStatusCodeException} from "sdkgen-client";

{% for className in imports %}
import {{ '{' }}{{ className }}{{ '}' }} from "./{{ className }}";
{% endfor %}

export class {{ className }} extends ClientAbstract {
{% for tag in tags %}
    public {{ tag.methodName }}(): {{ tag.className }}
    {
        return new {{ tag.className }}(
            this.httpClient,
            this.parser
        );
    }

{% endfor %}
{{ operations|raw }}

{% if security.type == 'httpBasic' %}
    public static build({% if not baseUrl %}baseUrl: string, {% endif %}userName: string, password: string): {{ className }}
    {
{% if not baseUrl %}
        return new {{ className }}(baseUrl, new HttpBasic(userName, password));
{% else %}
        return new {{ className }}('{{ baseUrl }}', new HttpBasic(userName, password));
{% endif %}
    }
{% elseif security.type == 'httpBearer' %}
    public static build({% if not baseUrl %}baseUrl: string, {% endif %}token: string): {{ className }}
    {
{% if not baseUrl %}
        return new {{ className }}(baseUrl, new HttpBearer(token));
{% else %}
        return new {{ className }}('{{ baseUrl }}', new HttpBearer(token));
{% endif %}
    }
{% elseif security.type == 'apiKey' %}
    public static build({% if not baseUrl %}baseUrl: string, {% endif %}token: string): {{ className }}
    {
{% if not baseUrl %}
        return new {{ className }}($baseUrl, new ApiKey($token, '{{ security.name }}', '{{ security.in }}'));
{% else %}
        return new {{ className }}('{{ baseUrl }}', new ApiKey($token, '{{ security.name }}', '{{ security.in }}'));
{% endif %}
    }
{% elseif security.type == 'oauth2' %}
    public static build({% if not baseUrl %}baseUrl: string, {% endif %}clientId: string, clientSecret: string, tokenStore: TokenStoreInterface|null, scopes: Array<string>|null): {{ className }}
    {
{% if not baseUrl %}
        return new {{ className }}(baseUrl, new OAuth2(clientId, clientSecret, '{{ security.tokenUrl }}', '{{ security.authorizationUrl }}', tokenStore, scopes));
{% else %}
        return new {{ className }}('{{ baseUrl }}', new OAuth2(clientId, clientSecret, '{{ security.tokenUrl }}', '{{ security.authorizationUrl }}', tokenStore, scopes));
{% endif %}
    }
{% endif %}

    public static buildAnonymous({% if not baseUrl %}baseUrl: string{% endif %}): {{ className }}
    {
{% if not baseUrl %}
        return new {{ className }}(baseUrl, new Anonymous());
{% else %}
        return new {{ className }}('{{ baseUrl }}', new Anonymous());
{% endif %}
    }
}
