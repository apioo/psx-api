import axios, {AxiosRequestConfig} from "axios";
import {ClientAbstract, TokenStoreInterface} from "sdkgen-client"
{% if security.type == 'httpBasic' %}
import {HttpBasic} from "sdkgen-client"
{% elseif security.type == 'httpBearer' %}
import {HttpBearer} from "sdkgen-client"
{% elseif security.type == 'apiKey' %}
import {ApiKey} from "sdkgen-client"
{% elseif security.type == 'clientCredentials' %}
import {ClientCredentials} from "sdkgen-client"
{% elseif security.type == 'authorizationCode' %}
import {AuthorizationCode} from "sdkgen-client"
{% endif %}
import {ClientException, UnknownStatusCodeException} from "sdkgen-client";

{% for ref, className in imports %}
import {{ '{' }}{{ className }}{{ '}' }} from "./{{ className }}";
{% endfor %}

export default class {{ className }} extends ClientAbstract {
{% for tag in tags %}
    public {{ tag.methodName }}(): {{ tag.className }}
    {
        return new {{ tag.className }}(
            this.httpClient,
            this.parser
        );
    }

{% endfor %}
{{ operations|raw }}

{% if security.type == 'httpBasic' %}
    public static build(baseUrl: string, userName: string, password: string): {{ className }}
    {
        return new {{ className }}(baseUrl, new HttpBasic(userName, password));
    }
{% elseif security.type == 'httpBearer' %}
    public static build(baseUrl: string, token: string): {{ className }}
    {
        return new {{ className }}(baseUrl, new HttpBearer(token));
    }
{% elseif security.type == 'apiKey' %}
    public static build(baseUrl: string, token: string): {{ className }}
    {
        return new {{ className }}($baseUrl, new ApiKey($token, '{{ security.name }}', '{{ security.in }}'));
    }
{% elseif security.type == 'clientCredentials' %}
    public static build(baseUrl: string, clientId: string, clientSecret: string, tokenStore: TokenStoreInterface|null, scopes: Array<string>|null): {{ className }}
    {
        return new {{ className }}(baseUrl, new ClientCredentials(clientId, clientSecret, '{{ security.tokenUrl }}', '{{ security.authorizationUrl }}', tokenStore, scopes));
    }
{% elseif security.type == 'authorizationCode' %}
    public static build(baseUrl: string, clientId: string, clientSecret: string, tokenStore: TokenStoreInterface|null, scopes: Array<string>|null): {{ className }}
    {
        return new {{ className }}(baseUrl, new AuthorizationCode(clientId, clientSecret, '{{ security.tokenUrl }}', '{{ security.authorizationUrl }}', tokenStore, scopes));
    }
{% endif %}
}
