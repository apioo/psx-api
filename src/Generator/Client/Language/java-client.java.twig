{% if namespace %}
package {{ namespace }};
{% endif %}

import app.sdkgen.client.ClientAbstract;
import app.sdkgen.client.Credentials.*;
import app.sdkgen.client.Exception.ClientException;
import app.sdkgen.client.Exception.UnkownStatusCodeException;
import org.apache.http.HttpResponse;
import org.apache.http.client.methods.HttpGet;
import org.apache.http.client.methods.HttpPost;
import org.apache.http.client.utils.URIBuilder;
import org.apache.http.entity.ContentType;
import org.apache.http.entity.StringEntity;
import org.apache.http.util.EntityUtils;

import java.time.LocalDate;
import java.time.LocalDateTime;
import java.util.HashMap;
import java.util.Map;

public class {{ className }} extends ClientAbstract {
{% for tag in tags %}
    public function {{ tag.className }} {{ tag.methodName }}()
    {
        return new {{ tag.className }}(
            $this->httpClient,
            $this->parser
        );
    }

{% endfor %}
{{ operations|raw }}

{% if security.type == 'httpBasic' %}
    public static {{ className }} build(String baseUrl, String userName, String password): {{ className }}
    {
        return new {{ className }}(baseUrl, new HttpBasic(userName, password));
    }
{% elseif security.type == 'httpBearer' %}
    public static {{ className }} build(String baseUrl, String token): {{ className }}
    {
        return new {{ className }}(baseUrl, new HttpBearer(token));
    }
{% elseif security.type == 'apiKey' %}
    public static {{ className }} build(String baseUrl, String token): {{ className }}
    {
        return new {{ className }}(baseUrl, new ApiKey(token, '{{ security.name }}', '{{ security.in }}'));
    }
{% elseif security.type == 'oauth2' %}
    public static {{ className }} build(String baseUrl, String clientId, String clientSecret, TokenStoreInterface tokenStore, List<String> scopes): {{ className }}
    {
        return new {{ className }}(baseUrl, new OAuth2(clientId, clientSecret, '{{ security.tokenUrl }}', '{{ security.authorizationUrl }}', tokenStore, scopes));
    }
{% endif %}
}
