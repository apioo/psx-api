{% for operation in operations %}
    /**
{% if operation.description %}     * {{ operation.description|raw }}
     *
{% endif %}
{% for name, arg in operation.arguments %}     * @param {{ arg.schema.docType|raw }}{% if arg.schema.optional %}|null{% endif %} ${{ name }}
{% endfor %}
     * @return {% if operation.return %}{{ operation.return.schema.docType|raw }}{% else %}void{% endif %}

{% for throw in operation.throws|throws_unique %}     * @throws {{ throw.className|raw }}
{% endfor %}
     * @throws ClientException
     */
    public function {{ operation.methodName }}({% for name, arg in operation.arguments %}{% if arg.schema.optional %}?{% endif %}{{ arg.schema.type }} ${{ name }}{% if arg.schema.optional %} = null{% endif %}{% if not loop.last %}, {% endif %}{% endfor %}): {% if operation.return %}{{ operation.return.schema.type|raw }}{% else %}void{% endif %}

    {
        $url = $this->parser->url('{{ operation.path|raw }}', [
{% for name, realName in operation.pathNames %}
            '{{ realName }}' => ${{ name }},
{% endfor %}
        ]);

        $options = [
            'headers' => [
{% if operation.bodyContentShape == 'multipart/form-data' %}
{% elseif operation.bodyContentType %}
                'Content-Type' => '{{ operation.bodyContentType }}',
{% elseif operation.bodyName %}
                'Content-Type' => 'application/json',
{% endif %}
            ],
            'query' => $this->parser->query([
{% for name, realName in operation.queryNames %}
                '{{ realName }}' => ${{ name }},
{% endfor %}
            ], [
{% for realName in operation.queryStructNames %}
                '{{ realName }}',
{% endfor %}
            ]),
{% if operation.bodyName %}
{% if operation.bodyContentShape == 'application/octet-stream' or operation.bodyContentShape == 'application/xml' or operation.bodyContentShape == 'text/plain' %}
            'body' => ${{ operation.bodyName }},
{% elseif operation.bodyContentShape == 'application/x-www-form-urlencoded' %}
            'form_params' => ${{ operation.bodyName }},
{% elseif operation.bodyContentShape == 'multipart/form-data' %}
            'multipart' => ${{ operation.bodyName }}->getParts(),
{% else %}
            'json' => ${{ operation.bodyName }},
{% endif %}
{% endif %}
        ];

        try {
            $response = $this->httpClient->request('{{ operation.method }}', $url, $options);
            $body = $response->getBody();

{% if operation.return %}
{{ _self.response(operation.return, false) }}
            return $data;
{% endif %}
        } catch (ClientException $e) {
            throw $e;
        } catch (BadResponseException $e) {
            $body = $e->getResponse()->getBody();
            $statusCode = $e->getResponse()->getStatusCode();

{% for code, throw in operation.throws %}
            if ({% if code == 999 %}$statusCode >= 0 && $statusCode <= 999{% elseif code == 499 %}$statusCode >= 400 && $statusCode <= 499{% elseif code == 599 %}$statusCode >= 500 && $statusCode <= 599{% else %}$statusCode === {{ code }}{% endif %}) {
{{ _self.response(throw, true) }}
                throw new {{ throw.className|raw }}($data);
            }

{% endfor %}
            throw new UnknownStatusCodeException('The server returned an unknown status code: ' . $statusCode);
        } catch (\Throwable $e) {
            throw new ClientException('An unknown error occurred: ' . $e->getMessage());
        }
    }

{% endfor %}

{% macro response(payload, in_throw) %}
{% if payload.contentShape == 'application/octet-stream' %}
            {% if in_throw %}    {% endif %}$data = $body;
{% elseif payload.contentShape == 'application/x-www-form-urlencoded' %}
            {% if in_throw %}    {% endif %}$data = [];
            {% if in_throw %}    {% endif %}parse_str((string) $body, $data);
{% elseif payload.contentShape == 'application/json' %}
            {% if in_throw %}    {% endif %}$data = \json_decode((string) $body);
{% elseif payload.contentShape == 'multipart/form-data' %}
            {% if in_throw %}    {% endif %}// @TODO currently not possible, please create an issue at https://github.com/apioo/psx-api if needed
            {% if in_throw %}    {% endif %}$data = new \Sdkgen\Client\Multipart();
{% elseif payload.contentShape == 'text/plain' or payload.contentShape == 'application/xml' %}
            {% if in_throw %}    {% endif %}$data = (string) $body;
{% else %}
            {% if in_throw %}    {% endif %}$data = $this->parser->parse((string) $body, {% if payload.isMapOrArray %}\PSX\Schema\SchemaSource::fromType('{{ payload.schema.docType|raw }}', __NAMESPACE__){% else %}\PSX\Schema\SchemaSource::fromClass({{ payload.schema.type|raw }}::class){% endif %});
{% endif %}
{% endmacro %}
